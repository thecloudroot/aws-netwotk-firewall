---

AWSTemplateFormatVersion: 2010-09-09
Description: Inspection VPC with AWS Network Firewall 2AZS and 2 NAT Gateways.

Parameters:
  Name:
    Type: String
    Description: 'VPC Name used throughout tag names'
    Default: 'Inspection'

  Region:
    Type: String
    Description: 'Region'
    Default: 'us-east-1'

  TransitGatewayId:
    Type: String
    Description: 'Transit Gateway Id'
    Default: 'tgw-0d3dbe04f6916bfe6'

  TransitGatewayMainRouteTableId:
    Type: String
    Description: 'Transit Gateway Main Route Table Id'
    Default: 'tgw-rtb-0be0bf2b57e53ff5d'

  VPCCIDR:
    Type: String
    Description: 'VPC IP address space, RFC 1918 address space only.'
    Default: '10.120.16.0/20'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'VPCCIDR'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'Name', 'VPC']]

  VPCIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'Name', 'IGW']]

  VPCIGWAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref 'VPCIGW'
      VpcId: !Ref 'VPC'

  # Transit Gateway Endpoint Subnets, ACLs, Route Tables, Associations
  TGWEndpointACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'Name', 'TGW']]
      VpcId: !Ref 'VPC'

  TGWEndpointACLEgressEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: TGWEndpointACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  TGWEndpointACLIngressEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: TGWEndpointACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0

  # Transit Gateway Endpoints Availability Zone 1
  TGWEndpointRouteTableAZ1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'Name', 'TGW', '2a']]
      VpcId: !Ref 'VPC'

  TWGNFWRouteAZ1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      VpcEndpointId: !Select [ 0, !Split [ ',', !Select [ 1 , !Split [ 'a:', !Join [ ',', !GetAtt Firewall.EndpointIds ] ] ] ] ]
      RouteTableId: !Ref TGWEndpointRouteTableAZ1

  TGWEndpointSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Join ['', [!Ref 'Region', 'a']]
      CidrBlock:
        !Select [0, !Cidr [!GetAtt VPC.CidrBlock, 9, 6]]
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'Name', 'TGW-2a']]
      VpcId: !Ref 'VPC'

  TGWEndpointSubnetAZ1Assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'TGWEndpointSubnetAZ1'
      RouteTableId: !Ref 'TGWEndpointRouteTableAZ1'

  TGWEndpointNACLAZ1Assoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'TGWEndpointSubnetAZ1'
      NetworkAclId: !Ref 'TGWEndpointACL'

  # Transit Gateway Endpoints Availability Zone 2
  TGWEndpointRouteTableAZ2:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'Name', 'TGW', '2b']]
      VpcId: !Ref 'VPC'

  TWGNFWRouteAZ2:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      VpcEndpointId: !Select [ 0, !Split [ ',', !Select [ 1 , !Split [ 'b:', !Join [ ',', !GetAtt Firewall.EndpointIds ] ] ] ] ]
      RouteTableId: !Ref TGWEndpointRouteTableAZ2

  TGWEndpointSubnetAZ2:
    Type: AWS::EC2::Subnet
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W3010
    Properties:
      AvailabilityZone: !Join ['', [!Ref 'Region', 'b']]
      CidrBlock:
        !Select [1, !Cidr [!GetAtt VPC.CidrBlock, 9, 6]]
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'Name', 'TGW-2b']]
      VpcId: !Ref 'VPC'

  TGWEndpointSubnetAZ2Assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'TGWEndpointSubnetAZ2'
      RouteTableId: !Ref 'TGWEndpointRouteTableAZ2'

  TGWEndpointNACLAZ2Assoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'TGWEndpointSubnetAZ2'
      NetworkAclId: !Ref 'TGWEndpointACL'

  # Firewall Endpoint Subnets, ACLs, Route Tables, Associations
  NFWEndpointACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'Name', 'NFW']]
      VpcId: !Ref 'VPC'

  NFWEndpointACLEgressEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NFWEndpointACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  NFWEndpointACLIngressEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NFWEndpointACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0

  # Firewall Endpoints Availability Zone 1
  NFWEndpointRouteTableAZ1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'Name', 'NFW', '2a']]
      VpcId: !Ref 'VPC'

  NFWNATRouteAZ1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGwAZ1
      RouteTableId: !Ref NFWEndpointRouteTableAZ1

  NFWTGWRouteAZ1:
    Type: AWS::EC2::Route
    DependsOn: TransitGatewayAttachment
    Properties:
      DestinationCidrBlock: '10.120.0.0/16'
      TransitGatewayId: !Ref TransitGatewayId
      RouteTableId: !Ref NFWEndpointRouteTableAZ1

  NFWEndpointSubnetAZ1:
    Type: AWS::EC2::Subnet
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W3010
    Properties:
      AvailabilityZone: !Join ['', [!Ref 'Region', 'a']]
      CidrBlock:
        !Select [3, !Cidr [!GetAtt VPC.CidrBlock, 9, 6]]
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'Name', 'NFW-2a']]
      VpcId: !Ref 'VPC'

  NFWEndpointSubnetAZ1Assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'NFWEndpointSubnetAZ1'
      RouteTableId: !Ref 'NFWEndpointRouteTableAZ1'

  NFWEndpointNACLAZ1Assoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'NFWEndpointSubnetAZ1'
      NetworkAclId: !Ref 'NFWEndpointACL'

  # Firewall Endpoints Availability Zone 2
  NFWEndpointRouteTableAZ2:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'Name', 'NFW', '2b']]
      VpcId: !Ref 'VPC'

  NFWNATRouteAZ2:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGwAZ2
      RouteTableId: !Ref NFWEndpointRouteTableAZ2

  NFWTGWRouteAZ2:
    Type: AWS::EC2::Route
    DependsOn: TransitGatewayAttachment
    Properties:
      DestinationCidrBlock: '10.120.0.0/16'
      TransitGatewayId: !Ref TransitGatewayId
      RouteTableId: !Ref NFWEndpointRouteTableAZ2

  NFWEndpointSubnetAZ2:
    Type: AWS::EC2::Subnet
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W3010
    Properties:
      AvailabilityZone: !Join ['', [!Ref 'Region', 'b']]
      CidrBlock:
        !Select [4, !Cidr [!GetAtt VPC.CidrBlock, 9, 6]]
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'Name', 'NFW-2b']]
      VpcId: !Ref 'VPC'

  NFWEndpointSubnetAZ2Assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'NFWEndpointSubnetAZ2'
      RouteTableId: !Ref 'NFWEndpointRouteTableAZ2'

  NFWEndpointNACLAZ2Assoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'NFWEndpointSubnetAZ2'
      NetworkAclId: !Ref 'NFWEndpointACL'

  # NAT Endpoint Subnets, ACLs, Route Tables, Associations
  NATEndpointACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'Name', 'NAT']]
      VpcId: !Ref 'VPC'

  NATEndpointACLEgressEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NATEndpointACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  NATEndpointACLIngressEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NATEndpointACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0

  # NAT Endpoints Availability Zone 1
  NATEndpointRouteTableAZ1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'Name', 'NAT', '2a']]
      VpcId: !Ref 'VPC'

  NATInternetRouteAZ1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref VPCIGW
      RouteTableId: !Ref NATEndpointRouteTableAZ1

  NATNFWRouteAZ1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '10.120.0.0/16'
      VpcEndpointId: !Select [ 0, !Split [ ',', !Select [ 1 , !Split [ 'a:', !Join [ ',', !GetAtt Firewall.EndpointIds ] ] ] ] ]
      RouteTableId: !Ref NATEndpointRouteTableAZ1

  NATEndpointSubnetAZ1:
    Type: AWS::EC2::Subnet
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W3010
    Properties:
      AvailabilityZone: !Join ['', [!Ref 'Region', 'a']]
      CidrBlock:
        !Select [6, !Cidr [!GetAtt VPC.CidrBlock, 9, 6]]
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'Name', 'NAT-2a']]
      VpcId: !Ref 'VPC'

  NATEndpointSubnetAZ1Assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'NATEndpointSubnetAZ1'
      RouteTableId: !Ref 'NATEndpointRouteTableAZ1'

  NATEndpointNACLAZ1Assoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'NATEndpointSubnetAZ1'
      NetworkAclId: !Ref 'NATEndpointACL'

  NATGwEipAZ1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGwAZ1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt
        - NATGwEipAZ1
        - AllocationId
      SubnetId: !Ref NATEndpointSubnetAZ1
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'Name', 'NAT-2a']]

  # NAT Endpoints Availability Zone 2
  NATEndpointRouteTableAZ2:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'Name', 'NAT', '2b']]
      VpcId: !Ref 'VPC'

  NATInternetRouteAZ2:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref VPCIGW
      RouteTableId: !Ref NATEndpointRouteTableAZ2

  NATNFWRouteAZ2:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '10.120.0.0/16'
      VpcEndpointId: !Select [ 0, !Split [ ',', !Select [ 1 , !Split [ 'b:', !Join [ ',', !GetAtt Firewall.EndpointIds ] ] ] ] ]
      RouteTableId: !Ref NATEndpointRouteTableAZ2

  NATEndpointSubnetAZ2:
    Type: AWS::EC2::Subnet
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W3010
    Properties:
      AvailabilityZone: !Join ['', [!Ref 'Region', 'b']]
      CidrBlock:
        !Select [7, !Cidr [!GetAtt VPC.CidrBlock, 9, 6]]
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'Name', 'NAT-2b']]
      VpcId: !Ref 'VPC'

  NATEndpointSubnetAZ2Assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'NATEndpointSubnetAZ2'
      RouteTableId: !Ref 'NATEndpointRouteTableAZ2'

  NATEndpointNACLAZ2Assoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'NATEndpointSubnetAZ2'
      NetworkAclId: !Ref 'NATEndpointACL'

  NATGwEipAZ2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGwAZ2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt
        - NATGwEipAZ2
        - AllocationId
      SubnetId: !Ref NATEndpointSubnetAZ2
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'Name', 'NAT-2b']]

  BaseDefaultSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt VPC.DefaultSecurityGroup
      IpProtocol: '-1'
      CidrIp: !Ref VPCCIDR

  Firewall:
    Type: AWS::NetworkFirewall::Firewall
    Properties:
      FirewallName: !Join ['-', [!Ref 'Name', 'NFW']]
      FirewallPolicyArn: !Ref FirewallPolicy
      VpcId: !Ref 'VPC'
      SubnetMappings:
        - SubnetId: !Ref NFWEndpointSubnetAZ1
        - SubnetId: !Ref NFWEndpointSubnetAZ2
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'Name', 'NFW']]

  FirewallLogFlowGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/inspection-fw/flow"

  FirewallLogAlertGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/inspection-fw/alert"

  FirewallLogTlsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/inspection-fw/tls"
    
  FirewallLog:
    Type: AWS::NetworkFirewall::LoggingConfiguration
    Properties:
      FirewallArn: !Ref Firewall
      LoggingConfiguration:
        LogDestinationConfigs:
          - LogType: FLOW
            LogDestinationType: CloudWatchLogs
            LogDestination:
              logGroup: !Sub "/${AWS::StackName}/inspection-fw/flow"
          - LogType: ALERT
            LogDestinationType: CloudWatchLogs
            LogDestination:
              logGroup: !Sub "/${AWS::StackName}/inspection-fw/alert"
          - LogType: TLS
            LogDestinationType: CloudWatchLogs
            LogDestination:
              logGroup: !Sub "/${AWS::StackName}/inspection-fw/tls"

  FirewallPolicy:
    Type: AWS::NetworkFirewall::FirewallPolicy
    Properties:
      FirewallPolicyName: 'Provider-Main'
      FirewallPolicy:
        StatelessDefaultActions:
          - 'aws:forward_to_sfe'
        StatelessFragmentDefaultActions:
          - 'aws:forward_to_sfe'

  TransitGatewayAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds:
        - !Ref TGWEndpointSubnetAZ1
        - !Ref TGWEndpointSubnetAZ2
      Tags:
        - Key: Name
          Value: Provider-Inspection-VPC
      TransitGatewayId: !Ref TransitGatewayId
      VpcId: !Ref 'VPC'

 #Create Transit Gateway Attachment Associations:
  Tgw1ApplianceVpcAttachmentAssociation:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties: 
      TransitGatewayAttachmentId: !Ref TransitGatewayAttachment
      TransitGatewayRouteTableId: !Ref TransitGatewayMainRouteTableId
  
# Create Transit Gateway Routes:

  Tgw1Route3:
    Type: AWS::EC2::TransitGatewayRoute
    Properties:
      TransitGatewayAttachmentId: !Ref TransitGatewayAttachment
      DestinationCidrBlock: 0.0.0.0/0
      TransitGatewayRouteTableId: !Ref TransitGatewayMainRouteTableId
